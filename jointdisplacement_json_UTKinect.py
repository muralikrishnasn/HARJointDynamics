#Read the json file generated by the openpose and convert it to the format 
#suitable for the RNN-LSTM network. This conversion takes only the first object 
#detected
import json
import numpy as np
from matplotlib import pyplot as plt
from numpy import array
from numpy import reshape
from pprint import pprint
import glob
from matplotlib.animation import FuncAnimation
import simplejson
from matplotlib import pyplot as plt
import pandas as pd
import math



#open('D:/ParamServerContents/KTH_TestTrain/boxing/Test/keypoints/person02_boxing_d1_uncomp_000000000000_keypoints.json').read())

Data_Set_Path = './datasets/UTKinect/'
NJOINTS = 20

#There are two action classes currently being used
action_classes = {'walk':1, 'sit down':2, 'stand up':3, 'pick up':4, 'carry':5, 'throw':6, 'push':7, 'pull':8, 'wave hands':9, 'clap hands':10}
frameCount = {'walk':0, 'sitDown':0, 'standUp':0, 'pickUp':0, 'carry':0, 'throw':0, 'push':0, 'pull':0, 'waveHands':0, 'clapHands':0}


data= np.empty((NJOINTS, 3))


labelFileName = Data_Set_Path + 'actionLabel.txt'
print labelFileName
#Read the actionLabel.txt file

with open(labelFileName,"r") as fp:
	#Read all the video file label information
	
	while True:
		#Read the subject_experiment based filename
		subject = fp.readline().strip()
		if not subject:
			break;
		fileName = Data_Set_Path + 'joints/' + 'joints_' +subject+ '.txt'
		action_list = []
		frameStart_list= []
		frameEnd_list = []
		
		#read the 10 lines mentioning the frame range for each action
		# In actionLabel.txt, the first entry is filename and then frame range for
		# each action
		
		for a in action_classes:
			strdata =  fp.readline()
			action = strdata.split(':')
			action = action[0].strip()
			frames = strdata.split(' ')
			frames_start = 0
			frames_end = 0 
			if(frames[1]!='NaN' and  frames[2]!='NaN'):
				frames_start = int(frames[1].strip())
				frames_end = int(frames[2].strip())
			frameStart_list.append(frames_start)
			frameEnd_list.append(frames_end)
			action_list.append(action)

		frameCount = {'walk':0, 'sitDown':0, 'standUp':0, 'pickUp':0, 'carry':0, 'throw':0, 'push':0, 'pull':0, 'waveHands':0, 'clapHands':0}		
		frameNum = 0 
		with open(fileName) as df:
			while True:
				linedata = df.readline().strip()
				linedata=" ".join(linedata.split())
				linedata = linedata.split(' ')
				if not linedata[0]:
					break
				#print linedata
				frameId = int(linedata[0].strip())
				#find the action label using the frame range in actionLabel.txt
				found  = 0
				index = 0
				#print frameId
				#Scan through the l
				while index < len(action_classes):
					#print index
					if (frameStart_list[index]<= frameId and frameId <= frameEnd_list[index]):
						found = 1
						break;
					index = index + 1
				# print frameStart_list
				# print frameEnd_list
				# print 'Found and FrameID and index',found, frameId,index
				if(found==0):
					continue
				currentActionLabel = action_list[index]
				frameCount[currentActionLabel] += 1
				
		print subject
		print action_list
		print frameStart_list
		print frameEnd_list
		print frameCount
		
		allocated = {'walk':False, 'sitDown':False, 'standUp':False, 'pickUp':False, 'carry':False, 'throw':False, 'push':False, 'pull':False, 'waveHands':False, 'clapHands':False}
		# #print 'subject',subject
		# # #Open the data file 
		# frameNum = 0

		with open(fileName) as df:
		# 	#print 'data reading', fileName
		#  	prevActionLabel = 'beginning'
		  	frameNum = 0;
		  	X_prevdata = []
		  	while True:
		  		linedata = df.readline().strip()
		  		linedata=" ".join(linedata.split())
				
		  		linedata = linedata.split(' ')
		  		if not linedata[0]:
		  			break
				
		  		frameId = int(linedata[0].strip())
				
		  		data_str = linedata[1:];
		  		data = [float(i) for i in data_str]
				
		  		#find the action label using the frame range in actionLabel.txt
		  		found  = 0
		  		index = 0
		 		#Scan through the l
		  		while index < len(frameStart_list):
		  			if (frameStart_list[index]<= frameId and frameId <= frameEnd_list[index]):
		  				found = 1
		  				break;
		  			index = index + 1
		  		if(found==0):
		  			continue
		  		else:
		  			currentActionLabel = action_list[index]

		  			if(allocated[currentActionLabel]==False):
		  				orientation_magnitude = np.zeros((2,NJOINTS,frameCount[currentActionLabel]),dtype=np.float64)
		  	 	 		allocated[currentActionLabel]= True
		  	 	 	data =np.array(data)
		  			data =  data.reshape((NJOINTS, 3))

			  		#X_data = data[:,:2]
					X_data = data[:,:1]
			  		X_data2 = data[:,1:2]
			  		X_data3 = data[:,2:3] 
					

	 	 	 		#Extract only the third column
	  		 		#third dimesion is the frame number 
	 	  	 		Zdim = np.ones((NJOINTS,1)) #np.array(data[:,2:]);
	 	  	 		X_data = np.array(X_data) 
	 	 	 		

	 	  	 		#Append X_data3
					X_data = np.append(X_data, X_data3,axis=1)

	 	  	 		X_data = np.append(X_data, Zdim,axis=1)
	 	  	 		#print X_data.shape,type(X_data)
	 	 	 		
	 	 	 		orientation=np.zeros((NJOINTS,1))
	 	 			magnitude = np.zeros((NJOINTS,1))
	 	 			
	 	 			if(len(X_prevdata)!=0):
	 	 				displacement = X_prevdata - X_data;
	 	 				# if(subject=='s03_e02' and currentActionLabel=='push'):
	 	 				# 	print 'X_data ==', X_data
				 			# print 'X_prevdata', X_prevdata

	 	 				# 	print displacement
	 	 				# 	os.system("pause")
	 	 				for p in range(0,displacement.shape[0]):
		 	 				orientation_magnitude[0][p][frameNum] = np.linalg.norm(displacement[p])
		 	 				orientation_magnitude[1][p][frameNum] = math.atan2(displacement[p][1],displacement[p][0]) *180/np.pi
					
					frameNum += 1
					X_prevdata = X_data

			 	 	if(frameNum >= frameCount[currentActionLabel]):
			 	 		X_prevdata = []
			 	 		outfile = Data_Set_Path +'processed/' + subject+'_' + currentActionLabel + '_dis.txt'
		     	 	# 	jsondata ={}
	  	 		 		# jsondata['FileName']= subject+'_' + currentActionLabel
	  	 		 		# jsondata['numberofframes'] = frameCount[currentActionLabel]
	  	 		 		
	  	 		 	 # 	with open(jsonoutfilename, 'w') as f:
	  	 		 	 # 	 	json.dump(jsondata, f)

			 	 		with file(outfile, 'w') as ofile:
	 				 		for slice2d in orientation_magnitude:
		 			 			np.savetxt(ofile, np.array(slice2d), delimiter=",")
		 			 	frameNum = 0

# for key in action_classes:
# 	filelist = sorted(glob.glob('./sampledataset/' + key + '/*.json'))


# 	for filename in filelist:
# 		print 'Procesing file', filename
# 		outfile = filename[:-5] +'_dis.'+ 'txt'

# 		#For each of the avi file there is corresponding 
# 		jsonfile = json.load(open(filename))

# 		#get the number of frames in avi from json
# 		nframes = jsonfile['numberofframes']
		
# 		#For each of the frame in a video file, the openpose creates 
# 		#json file containing the skeleton points (x,y, confidencemap)
# 		#Read all those json files corresponding to one of the avi files
		
# 		fileFrameName =['./sampledataset/' + key + '/keypoints/'+ jsonfile['FileName'].encode("utf-8") + "_%012d_keypoints.json" % i for i in range(nframes)]
		
# 		frameNum = 0  
# 		X_prevdata=[];
# 		directionList=[]
# 		orientation_magnitude = np.zeros((2,NJOINTS,nframes),dtype=np.float64)
# 		for f in fileFrameName:
# 			#ret, frame = cap.read()
			

# 			jsonfile = json.load(open(f))
# 			people_objects=jsonfile["people"]
# 			if(len(people_objects) > 1):
#  				people_objects = [people_objects[0]]
# 			if(len(people_objects) == 0):
#  				continue#print "No objects found:"
#  			objects = people_objects[0]
#  			# 		for objects in people_objects:
# 			data = array(objects["pose_keypoints_2d"])
#  		 	#split the coordinates and the confidence map
# 	 	 	#convert the 1-D to NX3 matrix
# 	 	 	data = data.reshape((data.shape[0]/3, 3))
# 	 	 	#X_data is the skeleton (x,y) coordinate the third dimension
# 	 	 	#is the frame number
# 	 	 	X_data = data[:,:2]
# 	 	 	#Extract only the third column
# 	 	 	confidencemap =data[:,2:]
	 	 		
# 	 	 	#third dimesion is the frame number 
# 	 	 	Zdim = np.ones((NJOINTS,1))
# 	 	 	X_data = np.array(X_data)
# 	 	 	X_data = np.append(X_data, Zdim,axis=1)
# 	 	 	orientation=np.zeros((NJOINTS,1))
# 	 	 	magnitude = np.zeros((NJOINTS,1))
			
# 	 	 	if(len(X_prevdata)!=0):
# 	 	 		displacement = X_prevdata - X_data;
# 	 	 		for p in range(0,displacement.shape[0]):
# 	 	 			orientation_magnitude[0][p][frameNum] = np.linalg.norm(displacement[p])
# 	 	 			orientation_magnitude[1][p][frameNum] = math.atan2(displacement[p][1],displacement[p][0]) *180/np.pi

# 	 	 	X_prevdata =X_data;
# 	 	 	frameNum = frameNum + 1

	 	 	
# 	 	with file(outfile, 'w') as ofile:
# 	 		for slice2d in orientation_magnitude:
# 	 			np.savetxt(ofile, np.array(slice2d), delimiter=",")
# 	 			#ofile.write('# New slice\n')

	 	
		
# 	 	#plt.imshow(frameangleMatrix, cmap="gray")
# 		#plt.show()

	 	 		



