#Read the json file generated by the openpose and convert it to the format 
#suitable for the RNN-LSTM network. This conversion takes only the first object 
#detected
import json
import numpy as np
from matplotlib import pyplot as plt
from numpy import array
from numpy import reshape
from pprint import pprint
import glob
from matplotlib.animation import FuncAnimation
import simplejson
from matplotlib import pyplot as plt
import pandas as pd
import cv2
import re
import os

#open('D:/ParamServerContents/KTH_TestTrain/boxing/Test/keypoints/person02_boxing_d1_uncomp_000000000000_keypoints.json').read())
def unit_vector(vector):
    """ Returns the unit vector of the vector.  """
    return vector / np.linalg.norm(vector)

def angle_between(v1, v2):
    """ Returns the angle in radians between vectors 'v1' and 'v2'::

            >>> angle_between((1, 0, 0), (0, 1, 0))
            1.5707963267948966
            >>> angle_between((1, 0, 0), (1, 0, 0))
            0.0
            >>> angle_between((1, 0, 0), (-1, 0, 0))
            3.141592653589793
    """
    v1_u = unit_vector(v1)
    v2_u = unit_vector(v2)
    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))


Data_Set_Path = './datasets/MSRAction3DSkeleton/'
subpath ='MSRAction3DSkeleton/'
NJOINTS = 20

#There are two action classes currently being used

actionClasses= {'high arm wave':1,'horizontal arm wave':2,'hammer':3,\
 'hand catch':4, 'forward punch':5,'high throw':6,'draw X':7,'draw tick':8,\
 'draw circle':9,'hand clap':10,'two hand wave':11,'side boxing':12,'bend':13,\
 'forward kick':14, 'side kick':15,'jogging':16,'tennis swing':17,\
 'tennis serve':18,'golf swing':19,'pickup and throw':20}
 
frameCount = {'walk':0, 'sitDown':0, 'standUp':0, 'pickUp':0, 'carry':0, 'throw':0, 'push':0, 'pull':0, 'waveHands':0, 'clapHands':0}

# #body_25 model has 25 Keypoints in the (x,y, confidencemap) format 25 X 3
data= np.empty((NJOINTS, 3))
flist = []


flist = os.listdir(Data_Set_Path + subpath)
# minlist= []
# maxlist= []
for fileName in flist:
	X_data = []
	fullfileName = Data_Set_Path + subpath + fileName
	totalrows = 0 
	with open(fullfileName,'r') as fp:
		while True:
	 		strdata =  fp.readline()
	 		if not strdata:
				#input("Press enter..")
	 			break
	 		strdata=strdata.strip()
	 		linedata=" ".join(strdata.split())
	 		linedata = linedata.split(' ')
	 		data = [float(i) for i in linedata]
	 		
	 	# 	#Swap the y and Z coordinates
	 	# 	temp = data[1]
			# data [1] = data[2]
			# data[2] =temp

			data = data[:2]  #consider only (x,y)
			
			X_data.append(data)
   			totalrows +=1
   	Zdim = np.ones((totalrows,1)) #np.array(data[:,2:]);
   	frameCount = totalrows / NJOINTS  #there are 20 rows per frame
   	X_data = np.array(X_data) 
 	X_data = np.append(X_data, Zdim,axis=1)
   	#print X_data.shape
   	#print frameCount
   	outfile = Data_Set_Path + 'processed/' + fileName[:-4] + '.csv'
 	jsondata ={}
  	jsondata['FileName']= fileName
 	jsondata['numberofframes'] = frameCount
 	jsonoutfilename = outfile[:-3]+'json'
 	with open(jsonoutfilename, 'w') as f:
 		json.dump(jsondata, f)

 	frameangleMatrix = np.zeros((NJOINTS,NJOINTS,frameCount)) 
 	X_framedata = []
 	start_loc = 0
 	for f in range(0,frameCount):
 		start_loc = NJOINTS*f
 		X_framedata = X_data[start_loc : start_loc+NJOINTS, :]
 		angleMatrix = np.zeros((NJOINTS, NJOINTS))
 		for i in range(0,NJOINTS):
			for j in range(0, NJOINTS):
		 	 		angleMatrix[i][j] = angle_between(X_framedata[i], X_framedata[j])
		 	 		frameangleMatrix[i][j][f] = angleMatrix[i][j]
		# minlist.append(angleMatrix.min())
		# maxlist.append(angleMatrix.max())

	with file(outfile, 'w') as ofile:
		for slice2d in frameangleMatrix:
	 		np.savetxt(ofile, np.array(slice2d), delimiter=",")
# print 'Minimum list',minlist
		 	 	
# print 'Maximum list',maxlist
# print 'Found maximum',array(maxlist).max()
# print 'Found minimum',array(minlist).min()